#include <WiFi.h>        // Biblioteca para conexÃ£o Wi-Fi
#include <PubSubClient.h> // Biblioteca para MQTT

// ðŸš€ ConfiguraÃ§Ãµes do Wi-Fi
const char* ssid = "SEU_WIFI";        // Nome da sua rede Wi-Fi
const char* password = "SUA_SENHA";   // Senha do Wi-Fi

// ðŸš€ ConfiguraÃ§Ãµes do MQTT
const char* mqtt_server = "broker.hivemq.com"; // Servidor MQTT gratuito
const char* mqtt_topic = "infusao/status";     // TÃ³pico MQTT onde enviaremos os dados
WiFiClient espClient;
PubSubClient client(espClient);

// ðŸ”Œ Pinos da BitDogLab
#define LED_AZUL 14   // LED para conexÃ£o Wi-Fi
#define LED_VERDE 13  // LED para infusÃ£o normal
#define LED_VERMELHO 12 // LED para erro na infusÃ£o
#define BOTAO 2       // BotÃ£o para iniciar infusÃ£o

// ðŸš€ FunÃ§Ã£o para conectar ao Wi-Fi
void conectarWiFi() {
    Serial.print("Conectando ao Wi-Fi...");
    WiFi.begin(ssid, password);

    while (WiFi.status() != WL_CONNECTED) {
        digitalWrite(LED_AZUL, HIGH);
        delay(500);
        Serial.print(".");
    }
    
    digitalWrite(LED_AZUL, LOW);
    Serial.println("\nWi-Fi Conectado!");
}

// ðŸš€ FunÃ§Ã£o para conectar ao servidor MQTT
void conectarMQTT() {
    while (!client.connected()) {
        Serial.print("Conectando ao MQTT...");
        if (client.connect("bitdoglab_client")) {
            Serial.println(" Conectado!");
        } else {
            Serial.print(" Falha. CÃ³digo: ");
            Serial.println(client.state());
            delay(5000);
        }
    }
}

// ðŸš€ Simula a infusÃ£o e envia dados para o MQTT
void iniciarInfusao() {
    Serial.println("ðŸŸ¢ InfusÃ£o iniciada!");
    digitalWrite(LED_VERDE, HIGH);
    client.publish(mqtt_topic, "InfusÃ£o em andamento");
    delay(5000); // Simula infusÃ£o por 5 segundos

    // Simular erro aleatÃ³rio
    Serial.println("ðŸ”´ Erro na infusÃ£o!");
    digitalWrite(LED_VERDE, LOW);
    digitalWrite(LED_VERMELHO, HIGH);
    client.publish(mqtt_topic, "ERRO: ObstruÃ§Ã£o detectada!");

    delay(2000);  // Pausa antes de resetar erro
    digitalWrite(LED_VERMELHO, LOW);
}

// ðŸš€ ConfiguraÃ§Ã£o inicial da placa
void setup() {
    Serial.begin(115200); // Inicia a comunicaÃ§Ã£o serial
    conectarWiFi();
    client.setServer(mqtt_server, 1883);

    // Configura os pinos dos LEDs e botÃ£o
    pinMode(LED_AZUL, OUTPUT);
    pinMode(LED_VERDE, OUTPUT);
    pinMode(LED_VERMELHO, OUTPUT);
    pinMode(BOTAO, INPUT_PULLUP);
}

// ðŸš€ Loop principal
void loop() {
    if (!client.connected()) {
        conectarMQTT();
    }
    client.loop();

    if (digitalRead(BOTAO) == LOW) {  // Se o botÃ£o for pressionado
        iniciarInfusao();
        delay(2000);  // Evita leituras repetidas
    }
}
